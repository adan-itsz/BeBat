{
  "_args": [
    [
      {
        "raw": "react.video",
        "scope": null,
        "escapedName": "react.video",
        "name": "react.video",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/adan/practicasWeb/beBat"
    ]
  ],
  "_from": "react.video@latest",
  "_id": "react.video@1.0.14",
  "_inCache": true,
  "_location": "/react.video",
  "_nodeVersion": "5.0.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/react.video-1.0.14.tgz_1462316509971_0.6991139503661543"
  },
  "_npmUser": {
    "name": "oliviercolonna",
    "email": "oliviercolonna@gmail.com"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {
    "envify": "3.4.1",
    "loose-envify": "1.3.1",
    "promise": "7.1.1",
    "ua-parser-js": "0.7.12"
  },
  "_requested": {
    "raw": "react.video",
    "scope": null,
    "escapedName": "react.video",
    "name": "react.video",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react.video/-/react.video-1.0.14.tgz",
  "_shasum": "722dadbbe1d6cf69447e6addcdffd85a50840697",
  "_shrinkwrap": null,
  "_spec": "react.video",
  "_where": "/home/adan/practicasWeb/beBat",
  "author": {
    "name": "Olivier Colonna",
    "email": "oliviercolonna@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/React-Components-Organization/react.video/issues"
  },
  "dependencies": {
    "react": "^0.14.6"
  },
  "description": "A reusable React.js video component.",
  "devDependencies": {
    "babel-cli": "^6.4.5",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-react": "^6.3.13",
    "babel-preset-stage-0": "^6.3.13",
    "gulp": "^3.9.0",
    "gulp-jshint": "^2.0.0",
    "gulp-react": "^3.1.0",
    "jshint": "^2.9.1"
  },
  "directories": {},
  "dist": {
    "shasum": "722dadbbe1d6cf69447e6addcdffd85a50840697",
    "tarball": "https://registry.npmjs.org/react.video/-/react.video-1.0.14.tgz"
  },
  "gitHead": "d0bef05fcb4dd8415116d72f5aecf6b3ce11a2e2",
  "homepage": "https://github.com/React-Components-Organization/react.video#readme",
  "keywords": [
    "react",
    "react.video",
    "component",
    "reusable",
    "react.js",
    "react-video",
    "react-component"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "oliviercolonna",
      "email": "oliviercolonna@gmail.com"
    }
  ],
  "name": "react.video",
  "optionalDependencies": {},
  "readme": "# react.video\n\n[![Build Status](https://travis-ci.org/React-Components-Organization/react.video.svg?branch=master)](https://travis-ci.org/React-Components-Organization/react.video)\n[![npm version](https://badge.fury.io/js/react.video.svg)](https://badge.fury.io/js/react.video)\n[![npm](https://img.shields.io/npm/dt/react.video.svg)](https://www.npmjs.com/package/react.video)\n\nA react video component, built with ES2015.\n\n## Installation\n\nInstall the module directly from npm:\n\n```\nnpm install react.video --save\n```\n\n## Usage\n\nA basic usage of ReactVideo and how to call public methods available through this.refs['your-ref'];\n\n```js\nimport React from 'react';\nimport ReactVideo from 'react.video';\n\nclass App extends React.Component {\n\n  constructor (props) {\n    super(props);\n    this.onClickPlay = this.onClickPlay.bind(this);\n    this.state = {\n      muted: false,\n      source: [\n        {\n          src: 'http://www.html5rocks.com/en/tutorials/video/basics/devstories.mp4',\n          type: 'video/mp4'\n        }\n      ]\n    };\n  }\n\n  // play() method is called via refs.\n  onClickPlay () {\n    this.refs.VideoComp.play();\n  }\n\n  render () {\n    // a basic style object\n    const VideoStyle = {\n        backgroundColor: 'green'\n    };\n\n    return (\n      <ReactVideo\n        ref={'VideoComp'}\n        cls={'custom-video'} \n        height={500} width={'100%'}\n        style={VideoStyle}\n        muted={this.state.muted}\n        src={'http://www.html5rocks.com/en/tutorials/video/basics/devstories.mp4'}\n        source={this.state.source}>\n      </ReactVideo>\n\n      <div>\n        <div onClick={this.onClickPlay}>Play</div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n```\n\n### Properties\n\n#### cls {string}\n\n>**NOTE:** The CSS class to add to this component's element, in addition to the baseCls 'container'.\n\n```js\n<ReactVideo cls={'custom-video'} />\n```\n\n#### autoPlay {boolean}\n\n>**NOTE:** Will automatically start playing the media when the video is activated.\nDefaults to: false\n\n#### src {string}\n\n>**NOTE:** Location of the video to play. This should be in H.264 format and in a .mov file format.\nDefaults to: empty string\n\n#### source {array}\n\n>**NOTE:** The <source> tag is used to specify multiple media resources for media elements.\nDefaults to: empty array\n\n```js\nconst sourceArray: [\n  {\n    src: 'http://www.html5rocks.com/en/tutorials/video/basics/devstories.mp4',\n    type: 'video/mp4'\n  }\n];\n\n<ReactVideo\n  source={sourceArray}>\n</ReactVideo>\n```\n\n#### controls {boolean}\n\n>**NOTE:** Determines if native controls should be shown for this video player.\nDefaults to: true\n\n```js\n<ReactVideo\n  controls={true}>\n</ReactVideo>\n```\n\n#### loop {boolean}\n\n>**NOTE:** Will loop the media forever.\nDefaults to: false\n\n```js\n<ReactVideo\n  loop={true}>\n</ReactVideo>\n```\n\n#### muted {boolean}\n\n>**NOTE:** Whether or not the media is muted. This will also set the volume to zero.\nDefaults to: false\n\n```js\n<ReactVideo\n  muted={true}>\n</ReactVideo>\n```\n\n#### posterUrl {string}\n\n>**NOTE:** Location of a poster image to be shown before showing the video.\nDefault to: empty string\n\n```js\n<ReactVideo\n  posterUrl={'my-url-to-my-poster'}>\n</ReactVideo>\n```\n\n#### preload {boolean}\n\n>**NOTE:** Will begin preloading the media immediately.\nDefault to: true\n\n```js\n<ReactVideo\n  preload={true}>\n</ReactVideo>\n```\n\n#### width {number/string}\n\n>**NOTE:** The width of this Component; must be a valid CSS length value, e.g: 300, 100px, 30%, etc. By default, if this is not explicitly set, this Component's element will simply have its own natural size. If set to auto, it will set the width to null meaning it will have its own natural size.\n\n#### height {number/string}\n\n>**NOTE:** The height of this Component; must be a valid CSS length value, e.g: 300, 100px, 30%, etc. By default, if this is not explicitly set, this Component's element will simply have its own natural size. If set to auto, it will set the height to null meaning it will have its own natural size.\n\n#### notSupportedMessage {string}\n\n>**NOTE:** The message to display in case the browser cannot play the media.\nDefault to: 'Sorry your browser does not support HTML5 video.'\n\n#### style {string/object}\n\n>**NOTE:** Optional CSS styles that will be rendered into an inline style attribute when the Component is rendered.\n\nYou can pass an object:\n\n```\nstyle: {\n    background: 'red'\n}\n```\n\n### Api\n\n>**NOTE:** All listed methods are available through the refs attribute. example 'this.refs['MyReactComponent'].isEnded()'\n\n#### canPlayType(format)\n\n>**NOTE:** The canPlayType() method checks if the browser can play the specified audio/video type.\n\n* @param {string} format, common values (video/mp4, video/webm, audio/mpeg, audio/ogg, audio/mp4).\n* @return {string} format, common values, including codecs.\n\n#### isPlaying()\n\n>**NOTE:** return if the media is currently playing.\n\n* @return {Boolean} playing, return the playback playing status.\n\n#### isEnded()\n\n>**NOTE:** get whenever the media playback has ended.\n\n* @return {Boolean} ended, return the playback ended status.\n\n#### load()\n\n>**NOTE:** Will begin loading the media immediately.\n\n#### play()\n\n>**NOTE:** Starts or resumes media playback.\n\n#### pause()\n\n>**NOTE:** Pauses media playback.\n\n#### stop()\n\n>**NOTE:** Stops media playback and returns to the beginning.\n\n#### getDuration()\n\n>**NOTE:** The duration property returns the length of the current audio/video, in seconds.\n\n* @return {number} duration, A Number representing the length of the video, in seconds. If no video is set, \"NaN\" (Not-a-Number) is returned.\n\n#### getCurrentTime()\n\n>**NOTE:** Returns the current time of the media, in seconds.\n\n* @return {Number} return a value between 0 to 1.\n\n#### getBuffered()\n\n>**NOTE:** The TimeRanges object represents the user's buffered ranges of the video.\n\n* @return {object} TimeRanges Object.\n  * length - get the number of buffered ranges in the audio/video\n  * start(index) - get the start position of a buffered range\n  * end(index) - get the end position of a buffered range\n\n#### getUrl()\n\n>**NOTE:** Returns the value of url.\n\n* @return {string} return the src value of the video.\n\n#### getVolume()\n\n>**NOTE:** Retun the current volume of the video.\n\n* @return {number} Must be a number between 0.0 and 1.0.\n\n#### setCurrentTime()\n\n>**NOTE:** Set the current time of the media.\n\n* @param {Number} time The time, in seconds.\n* @return {Number} return time in seconds.\n\n#### setPlaybackRate()\n\n>**NOTE:** Set video to play in slow motion.\n\n* The playbackRate property sets the current playback speed of the video.\n* @param {number} rate, Indicates the current playback speed of the video.\n* @example\n  * 1.0 is normal speed\n  * 0.5 is half speed (slower)\n  * 2.0 is double speed (faster)\n  * -1.0 is backwards, normal speed\n  * -0.5 is backwards, half speed\n\n#### setVolume()\n\n>**NOTE:** Set the current volume of the media.\n\n* @param {number} volume, Specifies the current volume of the audio/video. Must be a number between 0.0 and 1.0. \n\n#### toggle()\n\n>**NOTE:** Toggles the media playback state.\n\n## Stats\n\n[![NPM](https://nodei.co/npm-dl/react.video.png?months=1)](https://nodei.co/npm/react.video/)\n\n[![NPM](https://nodei.co/npm-dl/react.video.png?downloads=true)](https://nodei.co/npm/react.video/)\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2016 React-Components-Organization\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/React-Components-Organization/react.video.git"
  },
  "scripts": {
    "compile": "babel --presets es2015,stage-0,react -d ./ src/",
    "patch-release": "npm version patch && npm publish",
    "prepublish": "npm run compile",
    "test": "gulp"
  },
  "version": "1.0.14"
}
