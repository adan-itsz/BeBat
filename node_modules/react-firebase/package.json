{
  "_args": [
    [
      {
        "raw": "react-firebase",
        "scope": null,
        "escapedName": "react-firebase",
        "name": "react-firebase",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/adan/practicasWeb/beBat"
    ]
  ],
  "_from": "react-firebase@latest",
  "_id": "react-firebase@2.2.5",
  "_inCache": true,
  "_location": "/react-firebase",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-firebase-2.2.5.tgz_1491466240640_0.7760414674412459"
  },
  "_npmUser": {
    "name": "unfold",
    "email": "github@unfold.no"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-firebase",
    "scope": null,
    "escapedName": "react-firebase",
    "name": "react-firebase",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-firebase/-/react-firebase-2.2.5.tgz",
  "_shasum": "9c77e3eda3a827c1c27b453b3ddac2877b4d5659",
  "_shrinkwrap": null,
  "_spec": "react-firebase",
  "_where": "/home/adan/practicasWeb/beBat",
  "author": {
    "name": "Unfold",
    "email": "github@unfold.no",
    "url": "http://github.com/unfold"
  },
  "bugs": {
    "url": "https://github.com/unfold/react-firebase/issues"
  },
  "dependencies": {
    "invariant": "^2.0.0"
  },
  "description": "React bindings for Firebase",
  "devDependencies": {
    "@unfold/babel-preset": "^1.0.2",
    "@unfold/eslint-config": "^1.3.2",
    "babel-cli": "^6.18.0",
    "babel-core": "^6.7.4",
    "babel-eslint": "^7.1.1",
    "babel-loader": "^6.2.4",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.18.0",
    "eslint": "^3.10.2",
    "eslint-plugin-react": "^6.7.1",
    "express": "^4.13.4",
    "firebase": "^3.6.1",
    "isparta": "^4.0.0",
    "jsdom": "^9.8.3",
    "jsdom-global": "^2.1.0",
    "react": "^0.14.8 || ^15.0.0",
    "react-addons-test-utils": "^0.14.8 || ^15.0.0",
    "react-dom": "^0.14.8 || ^15.0.0",
    "tape": "^4.5.1",
    "webpack": "^2.2.1",
    "webpack-dev-middleware": "^1.6.1"
  },
  "directories": {},
  "dist": {
    "shasum": "9c77e3eda3a827c1c27b453b3ddac2877b4d5659",
    "tarball": "https://registry.npmjs.org/react-firebase/-/react-firebase-2.2.5.tgz"
  },
  "files": [
    "index.js",
    "Provider.js",
    "connect.js",
    "utils.js",
    "umd.js"
  ],
  "gitHead": "e578ec704ab26b3d3a4658ee920ae566b31090c6",
  "homepage": "https://github.com/unfold/react-firebase",
  "keywords": [
    "react",
    "reactjs",
    "firebase"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "unfold",
      "email": "github@unfold.no"
    }
  ],
  "name": "react-firebase",
  "optionalDependencies": {},
  "peerDependencies": {
    "firebase": "^3.6.1",
    "react": "^0.14.8 || ^15.0.0"
  },
  "readme": "React Firebase\n==============\n\nReact bindings for [Firebase](https://firebase.google.com).\n\n## Installation\n\n```\nnpm install --save react-firebase\n```\n\nReact Firebase requires **[React 0.14](https://github.com/facebook/react) and [Firebase 3](https://www.npmjs.com/package/firebase) or later.**\n\n## Example\n\n```js\nimport React from 'react'\nimport firebase from 'firebase'\nimport { connect } from 'react-firebase'\n\nfirebase.initializeApp({\n  databaseURL: 'https://react-firebase-sandbox.firebaseio.com'\n})\n\nconst Counter = ({ value, setValue }) => (\n  <div>\n    <button onClick={() => setValue(value - 1)}>-</button>\n    <span>{value}</span>\n    <button onClick={() => setValue(value + 1)}>+</button>\n  </div>\n)\n\nexport default connect((props, ref) => ({\n  value: 'counterValue',\n  setValue: value => ref('counterValue').set(value)\n}))(Counter)\n```\n\n## Usage\n\n### `connect([mapFirebaseToProps], [mergeProps])`\n\nConnects a React component to a Firebase App reference.\n\nIt does not modify the component class passed to it. Instead, it *returns* a new, connected component class, for you to use.\n\n#### Arguments\n\n* [`mapFirebaseToProps(props, ref, firebaseApp): subscriptions`] \\(*Object or Function*): Its result, or the argument itself must be a plain object. Each value must either be a path to a location in your database, a query object or a function. If you omit it, the default implementation just passes `firebaseApp` as a prop to your component.\n\n\n* [`mergeProps(ownProps, firebaseProps): props`] \\(*Function*): If specified, it is passed the parent `props` and current subscription state merged with the result of `mapFirebaseToProps()`. The plain object you return from it will be passed as props to the wrapped component. If you omit it, `Object.assign({}, ownProps, firebaseProps)` is used by default.\n\n#### Returns\n\nA React component class that passes subscriptions and actions as props to your component according to the specified options.\n\n> Note: \"actions\" are any function values returned by `mapFirebaseToProps()` which are typically used to modify data in Firebase.\n\n##### Static Properties\n\n* `WrappedComponent` *(Component)*: The original component class passed to `connect()`.\n\n#### Examples\n\n> Runnable examples can be found in the [examples folder](examples/).\n\n##### Pass `todos` as a prop\n\n  > Note: The value of `todos` is the path to your data in Firebase. This is equivalent to `firebase.database().ref('todo')`.\n\n```js\nconst mapFirebaseToProps = {\n  todos: 'todos'\n}\n\nexport default connect(mapFirebaseToProps)(TodoApp)\n```\n\n#####  Pass `todos` and a function that adds a new todo (`addTodo`) as props\n\n```js\nconst mapFirebaseToProps = (props, ref) => ({\n  todos: 'todos',\n  addTodo: todo => ref('todos').push(todo)\n})\n\nexport default connect(mapFirebaseToProps)(TodoApp)\n```\n\n#####  Pass `todos`, `completedTodos`, a function that completes a todo (`completeTodo`) and one that logs in as props\n\n```js\nconst mapFirebaseToProps = (props, ref, { auth }) => ({\n  todos: 'todos',\n  completedTodos: {\n    path: 'todos',\n    orderByChild: 'completed',\n    equalTo: true\n  },\n  completeTodo = id => ref(`todos/${id}/completed`).set(true),\n  login: (email, password) => auth().signInWithEmailAndPassword(email, password)\n})\n\nexport default connect(mapFirebaseToProps)(TodoApp)\n```\n\n### `<Provider firebaseApp>`\n\nBy default `connect()` will use the [default Firebase App](https://firebase.google.com/docs/reference/js/firebase.app). If you have multiple Firebase App references in your application you may use this to specify the Firebase App reference available to `connect()` calls in the component hierarchy below.\n\nIf you *really* need to, you can manually pass `firebaseApp` as a prop to every `connect()`ed component, but we only recommend to do this for stubbing `firebaseApp` in unit tests, or in non-fully-React codebases. Normally, you should just use `<Provider>`.\n\n#### Props\n\n* `firebaseApp` (*[App](https://firebase.google.com/docs/reference/js/firebase.app.App)*): A Firebase App reference.\n* `children` (*ReactElement*): The root of your component hierarchy.\n\n#### Example\n\n```js\nimport { Provider } from 'react-firebase'\nimport { initializeApp } from 'firebase'\n\nconst firebaseApp = initializeApp({\n  databaseURL: 'https://my-firebase.firebaseio.com'\n})\n\nReactDOM.render(\n  <Provider firebaseApp={firebaseApp}>\n    <MyRootComponent />\n  </Provider>,\n  rootEl\n)\n```\n\n## License\n\nMIT\n\n## Acknowledgements\n\n[`react-redux`](https://github.com/reactjs/react-redux) which this library is heavily inspired by.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/unfold/react-firebase.git"
  },
  "scripts": {
    "build": "babel src --ignore tests --out-dir .",
    "clean": "node -e 'console.log(require(\"./package\").files.join(\"\\n\"))' | xargs rm",
    "lint": "eslint src examples",
    "postbuild": "node -r babel-register scripts/build-umd.js",
    "postpublish": "npm run clean",
    "prepublish": "npm run build",
    "start": "node -r babel-register examples/server",
    "test": "node -r babel-register $(npm bin)/tape tests/**/*-test.js",
    "test:coverage": "node -r babel-register $(npm bin)/isparta cover $(npm bin)/tape -- src/**/*-test.js"
  },
  "unpkg": "umd.js",
  "version": "2.2.5"
}
