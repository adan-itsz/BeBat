{
  "_args": [
    [
      {
        "raw": "react-image-gallery@^0.8.3",
        "scope": null,
        "escapedName": "react-image-gallery",
        "name": "react-image-gallery",
        "rawSpec": "^0.8.3",
        "spec": ">=0.8.3 <0.9.0",
        "type": "range"
      },
      "D:\\Proyectos\\Web\\beBat"
    ]
  ],
  "_from": "react-image-gallery@>=0.8.3 <0.9.0",
  "_id": "react-image-gallery@0.8.3",
  "_inCache": true,
  "_location": "/react-image-gallery",
  "_nodeVersion": "5.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-image-gallery-0.8.3.tgz_1498263833687_0.8937156505417079"
  },
  "_npmUser": {
    "name": "linxtion",
    "email": "xiao@linxtion.com"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-image-gallery@^0.8.3",
    "scope": null,
    "escapedName": "react-image-gallery",
    "name": "react-image-gallery",
    "rawSpec": "^0.8.3",
    "spec": ">=0.8.3 <0.9.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-image-gallery/-/react-image-gallery-0.8.3.tgz",
  "_shasum": "508577a261e643487b344f05e9ec1a24b2f10573",
  "_shrinkwrap": null,
  "_spec": "react-image-gallery@^0.8.3",
  "_where": "D:\\Proyectos\\Web\\beBat",
  "author": {
    "name": "Xiao Lin"
  },
  "bugs": {
    "url": "https://github.com/xiaolin/react-image-gallery/issues"
  },
  "dependencies": {
    "lodash.debounce": "^4.0.8",
    "lodash.throttle": "^4.1.1",
    "prop-types": "^15.5.8",
    "react-swipeable": "^4.0.0"
  },
  "description": "Responsive and flexible carousel component with thumbnail support",
  "devDependencies": {
    "babel-eslint": "^6.0.4",
    "babel-plugin-transform-object-assign": "^6.8.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.16.0",
    "babelify": "^7.3.0",
    "browserify": "^13.1.1",
    "eslint": "^2.10.2",
    "eslint-plugin-react": "^5.1.1",
    "gulp": "^3.8.11",
    "gulp-babel": "^6.1.2",
    "gulp-clean-css": "^2.3.1",
    "gulp-concat": "^2.6.0",
    "gulp-connect": "^3.2.2",
    "gulp-livereload": "^3.8.0",
    "gulp-rename": "^1.2.0",
    "gulp-sass": "^2.3.2",
    "gulp-uglify": "^1.5.3",
    "react": "^15.5.4",
    "react-dom": "^15.5.4",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0",
    "watchify": "^3.8.0"
  },
  "directories": {},
  "dist": {
    "shasum": "508577a261e643487b344f05e9ec1a24b2f10573",
    "tarball": "https://registry.npmjs.org/react-image-gallery/-/react-image-gallery-0.8.3.tgz"
  },
  "email": "xiao@linxtion.com",
  "gitHead": "a8b06ad3c4c2d82542442937a70b2bb8a332a48e",
  "homepage": "https://github.com/xiaolin/react-image-gallery",
  "keywords": [
    "react",
    "carousel",
    "react-component",
    "react-carousel",
    "react-slideshow",
    "react-gallery",
    "react carousel",
    "react slideshow",
    "react gallery",
    "image gallery",
    "image slider",
    "slideshow",
    "gallery",
    "slider"
  ],
  "license": "MIT",
  "main": "./build/image-gallery",
  "maintainers": [
    {
      "name": "linxtion",
      "email": "xiao@linxtion.com"
    }
  ],
  "name": "react-image-gallery",
  "optionalDependencies": {},
  "readme": "React Image Gallery\n===\n\n[![npm version](https://badge.fury.io/js/react-image-gallery.svg)](https://badge.fury.io/js/react-image-gallery)\n[![Download Count](http://img.shields.io/npm/dm/react-image-gallery.svg?style=flat)](http://www.npmjs.com/package/react-image-gallery)\n\n## Live Demo (try it on mobile for swipe support)\nLive demo: [`linxtion.com/demo/react-image-gallery`](http://linxtion.com/demo/react-image-gallery)\n\n![demo gif](https://github.com/xiaolin/react-image-gallery/raw/master/static/image_gallery.gif)\n\nReact image gallery is a React component for building image galleries and carousels\n\nFeatures of `react-image-gallery`\n* Mobile friendly\n* Thumbnail navigation\n* Fullscreen support\n* Custom rendered slides\n* Responsive design\n\n## Getting started\n\n```\nnpm install react-image-gallery\n```\n\n### Style import\n\n```\n# SCSS\n@import \"node_modules/react-image-gallery/styles/scss/image-gallery.scss\";\n\n# CSS\n@import \"node_modules/react-image-gallery/styles/css/image-gallery.css\";\n\n# Webpack\nimport \"react-image-gallery/styles/css/image-gallery.css\";\n\n# Stylesheet with no icons\nnode_modules/react-image-gallery/styles/scss/image-gallery-no-icon.scss\nnode_modules/react-image-gallery/styles/css/image-gallery-no-icon.css\n```\n\n\n### Example\nNeed more example? See [`example/app.js`](https://github.com/xiaolin/react-image-gallery/blob/master/example/app.js)\n```js\nimport ImageGallery from 'react-image-gallery';\n\nclass MyComponent extends React.Component {\n\n  handleImageLoad(event) {\n    console.log('Image loaded ', event.target)\n  }\n\n  render() {\n\n    const images = [\n      {\n        original: 'http://lorempixel.com/1000/600/nature/1/',\n        thumbnail: 'http://lorempixel.com/250/150/nature/1/',\n      },\n      {\n        original: 'http://lorempixel.com/1000/600/nature/2/',\n        thumbnail: 'http://lorempixel.com/250/150/nature/2/'\n      },\n      {\n        original: 'http://lorempixel.com/1000/600/nature/3/',\n        thumbnail: 'http://lorempixel.com/250/150/nature/3/'\n      }\n    ]\n\n    return (\n      <ImageGallery\n        items={images}\n        slideInterval={2000}\n        onImageLoad={this.handleImageLoad}/>\n    );\n  }\n\n}\n```\n\n# Props\n\n* `items`: (required) Array of objects, see example above,\n  * Available Properties\n    * `original` - image src url\n    * `thumbnail` - image thumbnail src url\n    * `originalClass` - custom image class\n    * `thumbnailClass` - custom thumbnail class\n    * `originalAlt` - image alt\n    * `thumbnailAlt` - thumbnail image alt\n    * `originalTitle` - image title\n    * `thumbnailTitle` - thumbnail image title\n    * `thumbnailLabel` - label for thumbnail\n    * `description` - description for image\n    * `srcSet` - image srcset (html5 attribute)\n    * `sizes` - image sizes (html5 attribute)\n* `infinite`: Boolean, default `true`\n  * infinite sliding\n* `lazyLoad`: Boolean, default `false`\n* `showNav`: Boolean, default `true`\n* `showThumbnails`: Boolean, default `true`\n* `thumbnailPosition`: String, default `bottom`\n  * available positions: `top, right, bottom, left`\n* `showFullscreenButton`: Boolean, default `true`\n* `useBrowserFullscreen`: Boolean, default `true`\n  * if false, fullscreen will be done via css within the browser\n* `showPlayButton`: Boolean, default `true`\n* `showBullets`: Boolean, default `false`\n* `showIndex`: Boolean, default `false`\n* `autoPlay`: Boolean, default `false`\n* `disableThumbnailScroll`: Boolean, default `false`\n  * disables the thumbnail container from adjusting\n* `slideOnThumbnailHover`: Boolean, default `false`\n  * slides to the currently hovered thumbnail\n* `disableArrowKeys`: Boolean, default `false`\n* `disableSwipe`: Boolean, default `false`\n* `defaultImage`: String, default `undefined`\n  * an image src pointing to your default image if an image fails to load\n  * handles both slide image, and thumbnail image\n* `indexSeparator`: String, default `' / '`, ignored if `showIndex` is false\n* `slideDuration`: Integer, default `450`\n  * transition duration during image slide in milliseconds\n* `swipingTransitionDuration`: Integer, default `0`\n  * transition duration while swiping in milliseconds\n* `slideInterval`: Integer, default `3000`\n* `startIndex`: Integer, default `0`\n* `onImageError`: Function, `callback(event)`\n  * overrides defaultImage\n* `onThumbnailError`: Function, `callback(event)`\n  * overrides defaultImage\n* `onThumbnailClick`: Function, `callback(event, index)`\n* `onImageLoad`: Function, `callback(event)`\n* `onSlide`: Function, `callback(currentIndex)`\n* `onScreenChange`: Function, `callback(fullscreenElement)`\n* `onPause`: Function, `callback(currentIndex)`\n* `onPlay`: Function, `callback(currentIndex)`\n* `onClick`: Function, `callback(event)`\n* `onTouchMove`: Function, `callback(event)`\n* `onTouchEnd`: Function, `callback(event)`\n* `onTouchStart`: Function, `callback(event)`\n* `renderCustomControls`: Function, custom controls rendering\n  * Use this to render custom controls or other elements on the currently displayed image (like the fullscreen button)\n  ```javascript\n    _renderCustomControls() {\n      return <a href='' className='image-gallery-custom-action' onClick={this._customAction.bind(this)}/>\n    }\n  ```\n* `renderItem`: Function, custom item rendering\n  * On a specific item `[{thumbnail: '...', renderItem: this.myRenderItem}]`\n  or\n  * As a prop passed into `ImageGallery` to completely override `_renderItem`, see source for reference\n* `renderThumbInner`: Function, custom thumbnail rendering\n  * On a specific item `[{thumbnail: '...', renderThumbInner: this.myRenderThumbInner}]`\n  or\n  * As a prop passed into `ImageGallery` to completely override `_renderThumbInner`, see source for reference\n\n* `renderLeftNav`: Function, custom left nav component\n  * Use this to render a custom left nav control\n  * Passes `onClick` callback that will slide to the previous item and `disabled` argument for when to disable the nav\n  ```javascript\n    renderLeftNav(onClick, disabled) {\n      return (\n        <button\n          className='image-gallery-custom-left-nav'\n          disabled={disabled}\n          onClick={onClick}/>\n      )\n    }\n  ```\n* `renderRightNav`: Function, custom right nav component\n  * Use this to render a custom right nav control\n  * Passes `onClick` callback that will slide to the next item and `disabled` argument for when to disable the nav\n  ```javascript\n    renderRightNav(onClick, disabled) {\n      return (\n        <button\n          className='image-gallery-custom-right-nav'\n          disabled={disabled}\n          onClick={onClick}/>\n      )\n    }\n  ```\n* `renderPlayPauseButton`: Function, play pause button component\n  * Use this to render a custom play pause button\n  * Passes `onClick` callback that will toggle play/pause and `isPlaying` argument for when gallery is playing\n  ```javascript\n    renderPlayPauseButton: (onClick, isPlaying) => {\n      return (\n        <button\n          type='button'\n          className={\n            `image-gallery-play-button${isPlaying ? ' active' : ''}`}\n          onClick={onClick}\n        />\n      );\n    }\n  ```\n* `renderFullscreenButton`: Function, custom fullscreen button component\n  * Use this to render a custom fullscreen button\n  * Passes `onClick` callback that will toggle fullscreen and `isFullscreen` argument for when fullscreen is active\n  ```javascript\n    renderFullscreenButton: (onClick, isFullscreen) => {\n      return (\n        <button\n          type='button'\n          className={\n            `image-gallery-fullscreen-button${isFullscreen ? ' active' : ''}`}\n          onClick={onClick}\n        />\n      );\n    },\n  ```\n\n\n# Functions\n\n* `play()`: plays the slides\n* `pause()`: pauses the slides\n* `fullScreen()`: activates full screen\n* `exitFullScreen()`: deactivates full screen\n* `slideToIndex(index)`: slides to a specific index\n* `getCurrentIndex()`: returns the current index\n\n# Contributing\n\n* Follow eslint provided\n* Comment your code\n* Describe your feature/implementation in the pullrequest\n* Write [clean](https://github.com/ryanmcdermott/clean-code-javascript) code\n\n# Build the example locally\n\n```\ngit clone https://github.com/xiaolin/react-image-gallery.git\ncd react-image-gallery\nnpm install\nnpm start\n```\n\nThen open [`localhost:8001`](http://localhost:8001) in a browser.\n\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/xiaolin/react-image-gallery.git"
  },
  "scripts": {
    "build": "gulp build",
    "lint": "eslint --ext .js,.jsx src",
    "start": "gulp dev"
  },
  "version": "0.8.3"
}
