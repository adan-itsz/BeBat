{
  "_args": [
    [
      {
        "raw": "react-google-login@^2.9.2",
        "scope": null,
        "escapedName": "react-google-login",
        "name": "react-google-login",
        "rawSpec": "^2.9.2",
        "spec": ">=2.9.2 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Greye\\Desktop\\Proyecto\\beBat"
    ]
  ],
  "_from": "react-google-login@>=2.9.2 <3.0.0",
  "_id": "react-google-login@2.9.2",
  "_inCache": true,
  "_location": "/react-google-login",
  "_nodeVersion": "4.6.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-google-login-2.9.2.tgz_1497314090235_0.25824839202687144"
  },
  "_npmUser": {
    "name": "anthonygrove",
    "email": "anthony@th3legend.com"
  },
  "_npmVersion": "2.15.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-google-login@^2.9.2",
    "scope": null,
    "escapedName": "react-google-login",
    "name": "react-google-login",
    "rawSpec": "^2.9.2",
    "spec": ">=2.9.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-google-login/-/react-google-login-2.9.2.tgz",
  "_shasum": "4c7726f0aa488bf4d1b728567a37f3e600810ec4",
  "_shrinkwrap": null,
  "_spec": "react-google-login@^2.9.2",
  "_where": "C:\\Users\\Greye\\Desktop\\Proyecto\\beBat",
  "author": {
    "name": "Anthony Grove",
    "email": "anthony@th3legend.com"
  },
  "babel": {
    "env": {
      "development": {
        "presets": [
          [
            "es2015",
            {
              "modules": false
            }
          ],
          "react"
        ]
      },
      "test": {
        "presets": [
          "es2015",
          "react"
        ]
      },
      "production": {
        "presets": [
          [
            "es2015",
            {
              "modules": false
            }
          ],
          "react"
        ],
        "plugins": [
          "transform-react-remove-prop-types",
          "transform-react-constant-elements",
          "transform-react-inline-elements"
        ]
      }
    }
  },
  "bugs": {
    "url": "https://github.com/anthonyjgrove/react-google-login/issues"
  },
  "dependencies": {
    "@types/react": "*",
    "prop-types": "^15.5.0"
  },
  "description": "A Google Login Component for React",
  "devDependencies": {
    "autoprefixer": "6.7.7",
    "babel": "6.23.0",
    "babel-core": "6.24.1",
    "babel-eslint": "7.2.2",
    "babel-loader": "6.4.1",
    "babel-plugin-transform-react-constant-elements": "6.23.0",
    "babel-plugin-transform-react-inline-elements": "6.22.0",
    "babel-plugin-transform-react-remove-prop-types": "0.4.1",
    "babel-preset-es2015": "6.24.0",
    "babel-preset-react": "6.23.0",
    "chai": "3.5.0",
    "chai-jquery": "2.0.0",
    "eslint": "3.19.0",
    "eslint-config-airbnb": "14.1.0",
    "eslint-plugin-import": "2.2.0",
    "eslint-plugin-jsx-a11y": "4.0.0",
    "eslint-plugin-react": "6.10.3",
    "jquery": "3.1.1",
    "jsdom": "9.12.0",
    "mocha": "3.2.0",
    "react": "^15.5.0",
    "react-dom": "^15.5.0",
    "react-fontawesome": "1.5.0",
    "webpack": "2.2.1",
    "webpack-dev-server": "2.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "4c7726f0aa488bf4d1b728567a37f3e600810ec4",
    "tarball": "https://registry.npmjs.org/react-google-login/-/react-google-login-2.9.2.tgz"
  },
  "gitHead": "469496059825709ede266fb2c4888c9900cb077a",
  "homepage": "https://github.com/anthonyjgrove/react-google-login",
  "keywords": [
    "react",
    "reactjs",
    "react-component",
    "google-login",
    "google-oAuth2",
    "google-oAuth"
  ],
  "license": "MIT",
  "main": "dist/google-login.js",
  "maintainers": [
    {
      "name": "anthonygrove",
      "email": "anthony@th3legend.com"
    }
  ],
  "name": "react-google-login",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.5.0",
    "react-dom": "^15.5.0"
  },
  "readme": "# React Google Login\n\n> A Google oAUth Sign-in / Log-in Component for React\n\n\n## Install\n```\nnpm install react-google-login\n\n```\n## How to use\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport GoogleLogin from 'react-google-login';\n\nconst responseGoogle = (response) => {\n  console.log(response);\n}\n\nReactDOM.render(\n  <GoogleLogin\n    clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\n    buttonText=\"Login\"\n    onSuccess={responseGoogle}\n    onFailure={responseGoogle}\n  />,\n  document.getElementById('googleButton')\n);\n```\n## onSuccess callback\n\nIf offline is false callback will return the GoogleAuth object.\n\nIf offline is true callback will return the offline token for use on your server.\n\nIf you use the hostedDomain param, make sure to validate the id_token (a JSON web token) returned by Google on your backend server:\n 1. In the `responseGoogle(response) {...}` callback function, you should get back a standard JWT located at `response.hg.id_token`\n 2. Send this token to your server (preferably as an `Authorization` header)\n 3. Have your server decode the id_token by using a common JWT library such as [jwt-simple](https://github.com/hokaccha/node-jwt-simple) or by sending a GET request to `https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=YOUR_TOKEN_HERE`\n 4. The returned decoded token should have an `hd` key equal to the hosted domain you'd like to restrict to.\n\n## Parameters\n\n|    params    |   value  |             default value            |   description    |\n|:------------:|:--------:|:------------------------------------:|:----------------:|\n|    clientId  |  string  |               REQUIRED               |                  |\n| hostedDomain |  string  |                   -                  |                  |\n|     scope    |  string  |             profile email            |                  |\n| responseType |  string  |              permission              | A list of space-delimited response type. The possible values are: id_token, to retrieve an ID Token permission (or token), to retrieve an Access Token code, to retrieve an Authorization Code             |\n|   onSuccess  | function |               REQUIRED               |                  |\n|   onFailure  | function |               REQUIRED               |                  |\n|   onRequest  | function |                   -                  |                  |\n|    offline   |  boolean |                 false                |                  |\n|   buttonText |  string  |             Login with Google        |                  |\n|   className  |  string  |                   -                  |                  |\n|    style     |  object  |                   -                  |                  |\n| disabledStyle|  object  |                   -                  |                  |\n|   loginHint  |  string  |                   -                  |                  |\n|    prompt    |  string  |                   -                  |                  |\n|     tag      |  string  |                button                |  sets element tag (div, a, span, etc     |\n|   autoLoad   |  boolean |                 false                |                  |\n| fetchBasicProfile | boolean | true                            |                  |\n| disabled | boolean | false                            |                  |\n| discoveryDocs | - | https://developers.google.com/discovery/v1/using |\n| uxMode       |  string  |  popup   | The UX mode to use for the sign-in flow. Valid values are popup and redirect. |\n| redirectUri       |  string  |  -   | If using ux_mode='redirect', this parameter allows you to override the default redirect_uri that will be used at the end of the consent flow. The default redirect_uri is the current URL stripped of query parameters and hash fragment. |\n| isSignedIn | boolean | false | If true will return GoogleUser object on load, if user has given your app permission | \nGoogle Scopes List: https://developers.google.com/identity/protocols/googlescopes\n\n## onSuccess callback ( w/ offline false)\n\nonSuccess callback returns a GoogleUser object which provides access\nto all of the GoogleUser methods listed here: https://developers.google.com/identity/sign-in/web/reference#users .\n\nYou can also access the returned values via the following properties on the returned object.\n\n| property name |  value   |             definition               |\n|:-------------:|:--------:|:------------------------------------:|\n|   googleId    |  string  |           Google user ID             |\n|   tokenId     |  string  |              Token Id                |\n|  accessToken  |  string  |            Access Token              |\n|   tokenObj    |  object  |        Token details object          |\n|  profileObj   |  object  |        Profile details object        |\n\n## onSuccess callback ( w/ offline true)\n\n| property name |  value   |             definition               |\n|:-------------:|:--------:|:------------------------------------:|\n|    code       |  object  |           offline token              |\n\nYou can also pass child components such as icons into the button component.\n```js\n  <GoogleLogin\n    clientId={'658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com'}\n    onSuccess={responseGoogle}\n    onFailure={responseGoogle}\n    offline={false}\n  >\n    <FontAwesome\n      name='google'\n    />\n    <span> Login with Google</span>\n  </GoogleLogin>\n\n```\n\n\n## onFailure callback\n\nonFailure callback is called when either initialization or a signin attempt fails.\n\n| property name |  value   |             definition               |\n|:-------------:|:--------:|:------------------------------------:|\n|   error       |  string  |           Error code                 |\n|   details     |  string  |      Detailed error description      |\n\nCommon error codes include:\n\n| error code | description |\n|:----------:|:-----------:|\n| `idpiframe_initialization_failed` | initialization of the Google Auth API failed (this will occur if a client doesn't have [third party cookies enabled](https://github.com/google/google-api-javascript-client/issues/260)) |\n| `popup_closed_by_user` | The user closed the popup before finishing the sign in flow.|\n| `access_denied` | The user denied the permission to the scopes required |\n| `immediate_failed` | No user could be automatically selected without prompting the consent flow. |\n\nMore details can be found in the official Google docs:\n * [GoogleAuth.then(onInit, onError)](https://developers.google.com/identity/sign-in/web/reference#googleauththenoninit-onerror)\n * [GoogleAuth.signIn(options)](https://developers.google.com/identity/sign-in/web/reference#googleauthsigninoptions)\n * [GoogleAuth.grantOfflineAccess(options)](https://developers.google.com/identity/sign-in/web/reference#googleauthgrantofflineaccessoptions)\n\n## Dev Server\n```\nnpm run start\n\n```\nDefault dev server runs at localost:8080 in browser.\nYou can set IP and PORT in webpack.config.dev.js\n\n## Run Tests\n```\nnpm run test:watch\n\n```\n\n## Production Bundle\n```\nnpm run bundle\n```\n\n##### Checkout my other login: [React Instagram Login](https://github.com/anthonyjgrove/react-instagram-login)\n\n##### Checkout keppelen's [React Facebook Login](https://github.com/keppelen/react-facebook-login)\n\n### Follow me on Twitter: [@anthonyjgrove](https://twitter.com/anthonyjgrove)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/anthonyjgrove/react-google-login.git"
  },
  "scripts": {
    "bundle": "export NODE_ENV=production&& webpack -p --config webpack.config.dist.js",
    "clean": "rm -rf node_modules",
    "lint": "eslint src/ --fix",
    "start": "export NODE_ENV=development&& webpack-dev-server --config webpack.config.dev.js",
    "test": "export NODE_ENV=test&& mocha --compilers js:babel-core/register --require ./test/test_helper.js --recursive ./test",
    "test:watch": "npm run test -- --watch"
  },
  "types": "./index.d.ts",
  "version": "2.9.2"
}
